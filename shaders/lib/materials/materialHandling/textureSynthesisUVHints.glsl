// uv offsets

#define NUM_NORMAL_BLOCKS 360
#define NUM_4BRICKS_BLOCKS 2
#define NUM_2BRICKS_BLOCKS 4
#define DEMI_BLOCKS_TOP 7
#define DEMI_BLOCKS_BOTTOM 3


// Define UV offsets for each block category
const vec2 normalBlockOffsets[NUM_NORMAL_BLOCKS] = vec2[NUM_NORMAL_BLOCKS](
    vec2(336.0, 416.0),
    vec2(448.0, 128.0),
    vec2(448.0, 144.0),
    vec2(32.0, 80.0),
vec2(48.0, 80.0),
vec2(80.0, 80.0),
vec2(48.0, 96.0),
vec2(80.0, 96.0),
vec2(112.0, 96.0),
vec2(64.0, 112.0),
vec2(128.0, 16.0),
vec2(128.0, 32.0),
vec2(128.0, 80.0),
vec2(128.0, 96.0),
vec2(128.0, 112.0),
vec2(144.0, 0.0),
vec2(144.0, 32.0),
vec2(144.0, 48.0),
vec2(144.0, 112.0),
vec2(160.0, 32.0),
vec2(160.0, 80.0),
vec2(160.0, 96.0),
vec2(176.0, 0.0),
vec2(208.0, 112.0),
vec2(224.0, 0.0),
vec2(224.0, 32.0),
vec2(224.0, 48.0),
vec2(224.0, 80.0),
vec2(224.0, 96.0),
vec2(224.0, 112.0),
vec2(240.0, 0.0),
vec2(240.0, 80.0),
vec2(240.0, 96.0),
vec2(240.0, 112.0),
vec2(0.0, 128.0),
vec2(112.0, 128.0),
vec2(128.0, 128.0),
vec2(160.0, 128.0),
vec2(240.0, 128.0),
vec2(0.0, 144.0),
vec2(16.0, 144.0),
vec2(48.0, 144.0),
vec2(80.0, 144.0),
vec2(144.0, 144.0),
vec2(192.0, 144.0),
vec2(208.0, 144.0),
vec2(0.0, 160.0),
vec2(64.0, 160.0),
vec2(80.0, 160.0),
vec2(112.0, 160.0),
vec2(144.0, 192.0),
vec2(160.0, 192.0),
vec2(176.0, 192.0),
vec2(192.0, 192.0),
vec2(64.0, 208.0),
vec2(80.0, 208.0),
vec2(112.0, 208.0),
vec2(224.0, 224.0),
vec2(240.0, 224.0),
vec2(0.0, 240.0),
vec2(32.0, 240.0),
vec2(48.0, 240.0),
vec2(64.0, 240.0),
vec2(80.0, 240.0),
vec2(96.0, 240.0),
vec2(256.0, 112.0),
vec2(256.0, 240.0),
vec2(272.0, 32.0),
vec2(272.0, 48.0),
vec2(272.0, 64.0),
vec2(272.0, 80.0),
vec2(272.0, 96.0),
vec2(288.0, 128.0),
vec2(288.0, 144.0),
vec2(288.0, 160.0),
vec2(304.0, 16.0),
vec2(304.0, 32.0),
vec2(304.0, 48.0),
vec2(304.0, 96.0),
vec2(304.0, 144.0),
vec2(304.0, 160.0),
vec2(304.0, 176.0),
vec2(304.0, 192.0),
vec2(304.0, 240.0),
vec2(320.0, 0.0),
vec2(320.0, 80.0),
vec2(320.0, 96.0),
vec2(320.0, 176.0),
vec2(320.0, 192.0),
vec2(320.0, 224.0),
vec2(336.0, 16.0),
vec2(336.0, 96.0),
vec2(336.0, 144.0),
vec2(336.0, 208.0),
vec2(352.0, 0.0),
vec2(352.0, 48.0),
vec2(352.0, 112.0),
vec2(352.0, 128.0),
vec2(352.0, 144.0),
vec2(352.0, 160.0),
vec2(352.0, 176.0),
vec2(352.0, 192.0),
vec2(352.0, 208.0),
vec2(352.0, 224.0),
vec2(352.0, 240.0),
vec2(368.0, 0.0),
vec2(368.0, 16.0),
vec2(368.0, 32.0),
vec2(368.0, 48.0),
vec2(368.0, 64.0),
vec2(368.0, 80.0),
vec2(368.0, 96.0),
vec2(368.0, 112.0),
vec2(368.0, 128.0),
vec2(368.0, 144.0),
vec2(368.0, 160.0),
vec2(368.0, 176.0),
vec2(368.0, 192.0),
vec2(368.0, 240.0),
vec2(384.0, 0.0),
vec2(384.0, 16.0),
vec2(384.0, 32.0),
vec2(384.0, 112.0),
vec2(384.0, 176.0),
vec2(384.0, 224.0),
vec2(384.0, 240.0),
vec2(400.0, 112.0),
vec2(400.0, 128.0),
vec2(400.0, 160.0),
vec2(416.0, 48.0),
vec2(416.0, 160.0),
vec2(432.0, 32.0),
vec2(432.0, 64.0),
vec2(432.0, 96.0),
vec2(432.0, 112.0),
vec2(432.0, 128.0),
vec2(432.0, 144.0),
vec2(432.0, 224.0),
vec2(448.0, 32.0),
vec2(448.0, 48.0),
vec2(448.0, 64.0),
vec2(448.0, 80.0),
vec2(448.0, 96.0),
vec2(448.0, 160.0),
vec2(448.0, 176.0),
vec2(448.0, 224.0),
vec2(448.0, 240.0),
vec2(464.0, 64.0),
vec2(464.0, 80.0),
vec2(464.0, 128.0),
vec2(464.0, 144.0),
vec2(464.0, 224.0),
vec2(464.0, 240.0),
vec2(480.0, 64.0),
vec2(480.0, 80.0),
vec2(480.0, 112.0),
vec2(480.0, 128.0),
vec2(480.0, 144.0),
vec2(480.0, 160.0),
vec2(480.0, 176.0),
vec2(480.0, 192.0),
vec2(480.0, 240.0),
vec2(496.0, 16.0),
vec2(496.0, 48.0),
vec2(496.0, 96.0),
vec2(32.0, 256.0),
vec2(48.0, 256.0),
vec2(80.0, 256.0),
vec2(192.0, 256.0),
vec2(208.0, 256.0),
vec2(64.0, 32.0),
vec2(272.0, 256.0),
vec2(416.0, 256.0),
vec2(432.0, 256.0),
vec2(0.0, 272.0),
vec2(16.0, 272.0),
vec2(64.0, 272.0),
vec2(80.0, 272.0),
vec2(160.0, 272.0),
vec2(176.0, 272.0),
vec2(320.0, 272.0),
vec2(336.0, 272.0),
vec2(416.0, 272.0),
vec2(432.0, 272.0),
vec2(64.0, 288.0),
vec2(80.0, 288.0),
vec2(160.0, 288.0),
vec2(176.0, 288.0),
vec2(192.0, 288.0),
vec2(240.0, 288.0),
vec2(256.0, 288.0),
vec2(288.0, 288.0),
vec2(336.0, 288.0),
vec2(352.0, 288.0),
vec2(400.0, 288.0),
vec2(448.0, 288.0),
vec2(464.0, 288.0),
vec2(480.0, 288.0),
vec2(496.0, 288.0),
vec2(0.0, 304.0),
vec2(16.0, 304.0),
vec2(32.0, 304.0),
vec2(48.0, 304.0),
vec2(64.0, 304.0),
vec2(80.0, 304.0),
vec2(96.0, 304.0),
vec2(112.0, 304.0),
vec2(128.0, 304.0),
vec2(160.0, 304.0),
vec2(192.0, 304.0),
vec2(256.0, 304.0),
vec2(272.0, 304.0),
vec2(336.0, 304.0),
vec2(352.0, 304.0),
vec2(384.0, 304.0),
vec2(0.0, 320.0),
vec2(16.0, 320.0),
vec2(32.0, 320.0),
vec2(112.0, 320.0),
vec2(128.0, 320.0),
vec2(208.0, 320.0),
vec2(240.0, 320.0),
vec2(288.0, 320.0),
vec2(432.0, 320.0),
vec2(448.0, 320.0),
vec2(464.0, 320.0),
vec2(0.0, 336.0),
vec2(16.0, 336.0),
vec2(96.0, 336.0),
vec2(112.0, 336.0),
vec2(144.0, 336.0),
vec2(192.0, 336.0),
vec2(208.0, 336.0),
vec2(288.0, 336.0),
vec2(304.0, 336.0),
vec2(416.0, 336.0),
vec2(448.0, 336.0),
vec2(176.0, 352.0),
vec2(192.0, 352.0),
vec2(368.0, 352.0),
vec2(384.0, 352.0),
vec2(416.0, 352.0),
vec2(432.0, 352.0),
vec2(448.0, 352.0),
vec2(464.0, 352.0),
vec2(480.0, 352.0),
vec2(496.0, 352.0),
vec2(176.0, 368.0),
vec2(224.0, 368.0),
vec2(240.0, 368.0),
vec2(256.0, 368.0),
vec2(288.0, 368.0),
vec2(320.0, 368.0),
vec2(336.0, 368.0),
vec2(352.0, 368.0),
vec2(432.0, 368.0),
vec2(448.0, 368.0),
vec2(464.0, 368.0),
vec2(480.0, 368.0),
vec2(0.0, 384.0),
vec2(16.0, 384.0),
vec2(32.0, 384.0),
vec2(48.0, 384.0),
vec2(64.0, 384.0),
vec2(128.0, 384.0),
vec2(144.0, 384.0),
vec2(160.0, 384.0),
vec2(208.0, 384.0),
vec2(224.0, 384.0),
vec2(272.0, 384.0),
vec2(288.0, 384.0),
vec2(304.0, 384.0),
vec2(320.0, 384.0),
vec2(336.0, 384.0),
vec2(352.0, 384.0),
vec2(416.0, 384.0),
vec2(448.0, 384.0),
vec2(464.0, 384.0),
vec2(64.0, 400.0),
vec2(256.0, 400.0),
vec2(272.0, 400.0),
vec2(304.0, 400.0),
vec2(432.0, 400.0),
vec2(480.0, 400.0),
vec2(496.0, 400.0),
vec2(0.0, 416.0),
vec2(16.0, 416.0),
vec2(80.0, 416.0),
vec2(144.0, 416.0),
vec2(160.0, 416.0),
vec2(176.0, 416.0),
vec2(240.0, 416.0),
vec2(256.0, 416.0),
vec2(352.0, 416.0),
vec2(432.0, 416.0),
vec2(464.0, 416.0),
vec2(96.0, 432.0),
vec2(192.0, 432.0),
vec2(208.0, 432.0),
vec2(224.0, 432.0),
vec2(16.0, 448.0),
vec2(112.0, 448.0),
vec2(128.0, 448.0),
vec2(176.0, 448.0),
vec2(256.0, 448.0),
vec2(272.0, 448.0),
vec2(304.0, 448.0),
vec2(352.0, 448.0),
vec2(368.0, 448.0),
vec2(448.0, 448.0),
vec2(480.0, 448.0),
vec2(496.0, 448.0),
vec2(0.0, 464.0),
vec2(32.0, 464.0),
vec2(64.0, 464.0),
vec2(96.0, 464.0),
vec2(128.0, 464.0),
vec2(160.0, 464.0),
vec2(192.0, 464.0),
vec2(224.0, 464.0),
vec2(256.0, 464.0),
vec2(288.0, 464.0),
vec2(320.0, 464.0),
vec2(400.0, 464.0),
vec2(480.0, 464.0),
vec2(496.0, 464.0),
vec2(0.0, 480.0),
vec2(16.0, 480.0),
vec2(32.0, 480.0),
vec2(48.0, 480.0),
vec2(64.0, 480.0),
vec2(80.0, 480.0),
vec2(272.0, 480.0),
vec2(208.0, 496.0),
vec2(240.0, 496.0),
vec2(256.0, 496.0),
vec2(512.0, 96.0),
vec2(512.0, 112.0),
vec2(512.0, 128.0),
vec2(512.0, 192.0),
vec2(512.0, 208.0),
vec2(512.0, 224.0),
vec2(512.0, 272.0),
vec2(512.0, 304.0),
vec2(512.0, 320.0),
vec2(96.0, 32.0),
vec2(512.0, 336.0),
vec2(512.0, 352.0),
vec2(512.0, 384.0),
vec2(528.0, 16.0),
vec2(528.0, 64.0),
vec2(528.0, 240.0),
vec2(528.0, 256.0),
vec2(528.0, 336.0),
vec2(528.0, 368.0),
vec2(528.0, 464.0),
vec2(528.0, 480.0),
vec2(544.0, 48.0),
vec2(544.0, 64.0),
vec2(448.0, 112.0)
);

const vec2 bricks4BlockOffsets[NUM_4BRICKS_BLOCKS] = vec2[NUM_4BRICKS_BLOCKS](
    vec2(688.0, 368.0),  // Oak Planks
    vec2(272.0, 224.0)  // acacia planks
);

const vec2 bricks2BlockOffsets[NUM_2BRICKS_BLOCKS] = vec2[NUM_2BRICKS_BLOCKS](
    vec2(112.0, 448.0),  // Stone Bricks
    vec2(96.0, 320.0),  // End stone bricks
    vec2(272.0, 368.0),   // Mossy stone bricks
    vec2(64.0, 256.0)   // Books chelf
);

vec2 minUVNormal(int blockIndex) {
    return normalBlockOffsets[blockIndex] / atlasSize;
}

vec2 maxUVNormal(int blockIndex) {
    return (normalBlockOffsets[blockIndex] + vec2(16.0, 16.0)) / atlasSize;
}

vec2 minUV4Bricks(int blockIndex) {
    return bricks4BlockOffsets[blockIndex] / atlasSize;
}

vec2 maxUV4Bricks(int blockIndex) {
    return (bricks4BlockOffsets[blockIndex] + vec2(16.0, 16.0)) / atlasSize;
}

vec2 minUV2Bricks(int blockIndex) {
    return bricks2BlockOffsets[blockIndex] / atlasSize;
}

vec2 maxUV2Bricks(int blockIndex) {
    return (bricks2BlockOffsets[blockIndex] + vec2(16.0, 16.0)) / atlasSize;
}

